name: Test / Build / Publish

on:
  push:
    tags: ['v*']     # push a tag like `v1.2.3` to publish to PyPI
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    # Manual runs will publish to PyPI by default
    inputs: {}

jobs:
  test-and-build:
    name: Run tests and build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install build & test deps
        run: |
          python -m pip install --upgrade pip
          pip install build twine pytest

      - name: Run tests
        run: pytest -q

      - name: Build distributions
        run: python -m build --sdist --wheel

      - name: Upload artifacts
        if: ${{ github.event_name != 'push' || !startsWith(github.ref, 'refs/tags/') }}
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*

  publish:
    name: Publish to PyPI / TestPyPI
    runs-on: ubuntu-latest
    needs: test-and-build
    # run when a tag is pushed OR when manually dispatched
    if: >-
      startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install packaging tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Download dist (if produced in earlier job)
        if: ${{ always() }}
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Publish to PyPI
        shell: bash
        env:
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          set -euo pipefail
          echo "Publishing to: pypi"
          export TWINE_USERNAME="__token__"
          # TWINE_PASSWORD is provided from repo secret via env
          python -m twine upload dist/*
